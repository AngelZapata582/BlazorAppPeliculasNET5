@page "/generos"
@inject IRepositorio repositorio
@inject NavigationManager navigation
@inject SweetAlertService Swal
@attribute [Authorize(Roles = "admin")]
<h3>Index Genero</h3>
<div class="mb-3">
    <a class="btn btn-info" href="generos/crear">Agregar Genero</a>
</div>
<ListadoGenerico listado="Generos">
    <RegistrosCompletos>
        <table class="table table-striped">
            <thead>
                <th></th>
                <th>Nombre</th>
            </thead>
            <tbody>
                @foreach (var item in Generos)
                {
                    <tr>
                        <td>
                            <a class="btn btn-success" href="/generos/editar/@item.Id">Editar</a>
                            <a class="btn btn-danger text-light" @onclick="@(()=>Borrar(item))">Borrar</a>
                        </td>
                        <td>
                            @item.Name
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </RegistrosCompletos>
</ListadoGenerico>
@code {
    List<Genero> Generos = new List<Genero>();

    protected override async Task OnInitializedAsync()
    {
        await Cargar();
    }

    private async Task Cargar()
    {
        var responseHttp = await repositorio.Get<List<Genero>>("api/generos");

        Generos = responseHttp.Response;
    }

    private async Task Borrar(Genero genero)
    {
        var confirm = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmacion",
                Text = $"¿Desea borrar el genero {genero.Name}?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Aceptar",
                CancelButtonText = "Cancelar"
            });
        if (!string.IsNullOrEmpty(confirm.Value))
        {
            var responseHttp = await repositorio.Delete($"api/generos/{genero.Id}");
            if (responseHttp.Error)
            {
                if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
                {
                    navigation.NavigateTo("/");
                }
                else
                {
                    var errorMessage = await responseHttp.ObtenerMensageError();
                    await Swal.FireAsync("Error", errorMessage, SweetAlertIcon.Error);
                }
            }
            else
            {
                await Cargar();
            }
        }        
    }
}
