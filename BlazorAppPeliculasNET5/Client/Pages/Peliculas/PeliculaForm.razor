@inject IRepositorio repositorio
<EditForm Model="Pelicula" OnValidSubmit="@OnDateAnnotationValidated">
    <DataAnnotationsValidator/>
    <div class="mb-3">
        <label>Titulo: </label>
        <div>
            <InputText class="form-control" @bind-Value="Pelicula.Titulo"/>
            <ValidationMessage For="@(()=>Pelicula.Titulo)"/>
        </div>
    </div>
    <div class="mb-3">
        <label for="encartelera">En Cartelera</label>
        <div>
            <InputCheckbox id="encartelera" @bind-Value="Pelicula.EnCartelera"/>
            <ValidationMessage For="@(()=>Pelicula.EnCartelera)"/>
        </div>
    </div>
    <div class="mb-3">
        <label>Trailer: </label>
        <div>
            <InputText class="form-control" @bind-Value="Pelicula.Trailer" />
            <ValidationMessage For="@(()=>Pelicula.Trailer)" />
        </div>
    </div>
    <div class="mb-3">
        <InputImg Label="Poster" ImagenSeleccionada="ImagenSeleccionada" imageUrl="@imagenUrl"></InputImg>
    </div>
    <div class="mb-3">
        <InputDate @bind-Value="@Pelicula.Lanzamiento" class="form-control"/>
        <ValidationMessage For="@(()=>Pelicula.Lanzamiento)"/>
    </div>
    <div class="mb-3 form-markdown">
        <InputMarkdown @bind-Value="Pelicula.Resumen" For="@(()=>Pelicula.Resumen)" Label="Resumen"/>
    </div>

    <div class="mb-3">
        <label>Generos</label>
        <div>
            <SelectorMultiple Seleccionados="Seleccionados" NoSeleccionado="NoSeleccionado"/>
        </div>
    </div>

    <div class="mb-3">
        <label>Actores</label>
        <div>
            <SelectorMultipleTypeahead Context="Actor" SearchMethod="BuscarActor" ElementosSeleccionados="ActoresSeleccionados">
                <MyListTemplate>
                    @Actor.Nombre / <input type="text" placeholder="Pesonaje" @bind="Actor.Personaje"/>
                </MyListTemplate>
                <MyResultTemplate>
                    <img style="width:50px" src="@Actor.Foto" />
                    @Actor.Nombre
                </MyResultTemplate>
            </SelectorMultipleTypeahead>
        </div>
    </div>
    <button type="submit" class="btn btn-success">
        @if (loading)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
        }
        Guardar</button>
</EditForm>
@code {
    [Parameter] public Pelicula Pelicula { get; set; } = null!;
    [Parameter] public EventCallback OnValidSubmit { set; get; }
    private List<SelectorMultipleModel> Seleccionados { get; set; } = new List<SelectorMultipleModel>();
    private List<SelectorMultipleModel> NoSeleccionado { get; set; } = new List<SelectorMultipleModel>();
    [Parameter] public List<Actor> ActoresSeleccionados { get; set; } = new List<Actor>();
    [Parameter] public List<Genero> GenerosSeleccionados { get; set; } = new List<Genero>();
    [Parameter] public List<Genero> GenerosNoSeleccionados { get; set; } = new List<Genero>();
    [Parameter] public bool loading { get; set; } = false;
    private string imagenUrl { get; set; } = null!;

    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(Pelicula.Poster))
        {
            imagenUrl = Pelicula.Poster;
            Pelicula.Poster = null;
        }

        Seleccionados = GenerosSeleccionados.Select(x=>new SelectorMultipleModel(x.Id.ToString(), x.Name)).ToList();
        NoSeleccionado = GenerosNoSeleccionados.Select(x => new SelectorMultipleModel(x.Id.ToString(), x.Name)).ToList();
    }

    private void ImagenSeleccionada(String imagenBase64)
    {
        Pelicula.Poster = imagenBase64;
        imagenUrl = null;
    }

    private async Task<IEnumerable<Actor>> BuscarActor(string searText){
        var respuestaHttp = await repositorio.Get<List<Actor>>($"api/actores/buscar/{searText}");
        return respuestaHttp.Response;
    }

    private async Task OnDateAnnotationValidated()
    {
        Pelicula.GeneroPeliculas = Seleccionados
        .Select(x => new GeneroPelicula { GeneroId = int.Parse(x.Llave) }).ToList();
        Pelicula.PeliculasActor = ActoresSeleccionados
        .Select(x => new PeliculaActor { ActorId = x.Id, Personaje = x.Personaje }).ToList();
        await OnValidSubmit.InvokeAsync();

    }
}
