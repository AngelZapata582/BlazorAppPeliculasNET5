@page "/peliculas/editar/{PeliculaId:int}"
@inject IRepositorio repositorio
@inject SweetAlertService Swal
@inject NavigationManager navigation
<h3>Editar Pelicula</h3>
@if (Pelicula is null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
        </div>
    </div>
}
else
{
    <PeliculaForm Pelicula="Pelicula" OnValidSubmit="Edit" 
        GenerosNoSeleccionados="GenerosNoSeleccionados" 
        GenerosSeleccionados="GenerosSeleccionados"
        ActoresSeleccionados="ActoresSeleccionados"></PeliculaForm>
}
@code {
    private Pelicula Pelicula { get; set; }
    [Parameter] public int PeliculaId { get; set; }
    public List<Genero> GenerosNoSeleccionados { set; get; } = new List<Genero>();
    public List<Genero> GenerosSeleccionados { set; get; } = new List<Genero>();
    private List<Actor> ActoresSeleccionados { get; set; } = new List<Actor>();

    protected override async Task OnInitializedAsync()
    {
        var responseHttp = await repositorio.Get<UpdatePeliculaDTO>($"api/peliculas/actualizar/{PeliculaId}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigation.NavigateTo("peliculas");
            }
            else
            {
                var messageError = await responseHttp.ObtenerMensageError();
                await Swal.FireAsync("Error", messageError, SweetAlertIcon.Error);
            }
        }
        else
        {
            var modelo = responseHttp.Response;
            modelo = responseHttp.Response;
            ActoresSeleccionados = modelo.Actores;
            GenerosSeleccionados = modelo.GenerosSeleccionados;
            GenerosNoSeleccionados = modelo.GenerosNoSeleccionados;
            Pelicula = modelo.Pelicula;
        }
    }

    private async Task Edit()
    {
        var responseHttp = await repositorio.Put("api/peliculas", Pelicula);

        if (responseHttp.Error)
        {
            var errorMessage = await responseHttp.ObtenerMensageError();
            await Swal.FireAsync("Error", errorMessage, SweetAlertIcon.Error);
        }
        else
        {
            navigation.NavigateTo($"peliculas/{PeliculaId}/{Pelicula.Titulo.ToString().Replace(" ","-")}");
        }
    }
}
